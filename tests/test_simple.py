# Copyright (C) 2020 Famedly
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

import base64
import json
from typing import Any
from unittest.mock import AsyncMock, Mock, patch

from synapse.module_api import NOT_SPAM, errors
from synapse.rest import admin
from synapse.rest.client import (
    account_data,
    login,
    notifications,
    presence,
    profile,
    room,
)
from synapse.server import HomeServer
from synapse.util import Clock
from twisted.internet import defer
from twisted.internet.testing import MemoryReactor
from typing_extensions import override

import tests.unittest as synapsetest
from synapse_invite_checker import InviteChecker
from synapse_invite_checker.types import FederationDomain

# ruff: noqa: E501
# We don't care about long lines in our testdata

rawjwt = "eyJhbGciOiJCUDI1NlIxIiwieDVjIjpbIk1JSUMrVENDQXFDZ0F3SUJBZ0lDYkFZd0NnWUlLb1pJemowRUF3SXdnWVF4Q3pBSkJnTlZCQVlUQWtSRk1SOHdIUVlEVlFRS0RCWm5aVzFoZEdscklFZHRZa2dnVGs5VUxWWkJURWxFTVRJd01BWURWUVFMRENsTGIyMXdiMjVsYm5SbGJpMURRU0JrWlhJZ1ZHVnNaVzFoZEdscmFXNW1jbUZ6ZEhKMWEzUjFjakVnTUI0R0ExVUVBd3dYUjBWTkxrdFBUVkF0UTBFMU1DQlVSVk5VTFU5T1RGa3dIaGNOTWpNd01USTFNVEEwTXpVMldoY05Namd3TVRJME1UQTBNelUxV2pCek1Rc3dDUVlEVlFRR0V3SkVSVEV5TURBR0ExVUVDZ3dwWVhKMllYUnZJRk41YzNSbGJYTWdSMjFpU0NCVVJWTlVMVTlPVEZrZ0xTQk9UMVF0VmtGTVNVUXhFREFPQmdOVkJBVVRCekF3TURBeExVRXhIakFjQmdOVkJBTU1GVlphUkMxR1NFbFNMVVpNYVhOMExWTnBaMjVsY2pCYU1CUUdCeXFHU000OUFnRUdDU3NrQXdNQ0NBRUJCd05DQUFRWXRpc3hVUEpTdUMwdG85bE9zMXpkblJwZWJaMGljaGNnaTFzTnQ4YnVDMm5IVFBIQm5DVHJ3ZklNS1k5TEFSYU9zM05RQUlsM0xSM1podVRHcWM4bW80SUJEekNDQVFzd0hRWURWUjBPQkJZRUZKK20wTnh3RHc2L1BxRmw5NzlxdWMwYlA0YWJNQjhHQTFVZEl3UVlNQmFBRkRyaXFpV1NUcXlwbEgzUEdXbnFFd2E1cUREVE1FOEdDQ3NHQVFVRkJ3RUJCRU13UVRBL0JnZ3JCZ0VGQlFjd0FZWXphSFIwY0RvdkwyOWpjM0F5TFhSbGMzUnlaV1l1YTI5dGNDMWpZUzUwWld4bGJXRjBhV3N0ZEdWemRDOXZZM053TDJWak1BNEdBMVVkRHdFQi93UUVBd0lIZ0RBaEJnTlZIU0FFR2pBWU1Bb0dDQ3FDRkFCTUJJRWpNQW9HQ0NxQ0ZBQk1CSUZMTUF3R0ExVWRFd0VCL3dRQ01BQXdOd1lGS3lRSUF3TUVMakFzTUNvd0tEQW1NQ1F3Rmd3VVZtVnllbVZwWTJodWFYTmthV1Z1YzNRdFZFa3dDZ1lJS29JVUFFd0VnU3N3Q2dZSUtvWkl6ajBFQXdJRFJ3QXdSQUlnVDJCUmJDSUltT3BTVUgvNTB5U1EvQ1ppOEV6bEF4Qkg0RXJMdGxvWURHY0NJR1hjUjJZZzRocG9VS2U3cHFIamJQSGU5Y2liUjNHZGVtNG5uQ25NVHJ1ZSJdLCJ0eXAiOiJKV1QifQ..Xk3_0btGY2DwY4uCRK_D9Pf3YZaMKVCbf-wjeLgXX5JoiG-Aq4D7Xu154ndI1lJCVO530nQg9Aay-OxilrJwbA"

raw_ca_list = """
[
    {
        "cert": "MIIEJjCCAw6gAwIBAgIBATANBgkqhkiG9w0BAQsFADCBgTEbMBkGA1UEAwwSR0VNLlJDQTEgVEVTVC1PTkxZMTQwMgYDVQQLDCtaZW50cmFsZSBSb290LUNBIGRlciBUZWxlbWF0aWtpbmZyYXN0cnVrdHVyMR8wHQYDVQQKDBZnZW1hdGlrIEdtYkggTk9ULVZBTElEMQswCQYDVQQGEwJERTAeFw0xNDAyMjAxMzU0MzFaFw0yNDAyMTgxMzU0MzFaMIGBMRswGQYDVQQDDBJHRU0uUkNBMSBURVNULU9OTFkxNDAyBgNVBAsMK1plbnRyYWxlIFJvb3QtQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxHzAdBgNVBAoMFmdlbWF0aWsgR21iSCBOT1QtVkFMSUQxCzAJBgNVBAYTAkRFMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAza/q0ST/mpAk768bwZGvur0bhA7mI07M+ACmK2jhrbdr2JaN9pX9k8zVrVHPJA6DQNWrSUPTRwuOXcE2K9akSwVtvJ316WW1C0JU4C1gYd5SaolUhUj8o0Z4VjHbI7bSffX+K2xsbnqM5u51maA0k79zHoixuI9fOHp44oPby7WjWqLk8vXfVi7GiS6JIwjOxwYO5pHKkykMmmvINzFkrYfzF+RmwUILp2hEkjorWSaPbc3NqxZXIAC9NQpB4CKNal1LLQwi+/VEnF9Sj8KHMFkPpaIaQwl6qHAh+QiZVNf/6dmqdmGHIIZNMnfkxRh2IPd+TYx7+Bb0yE6l07qyKQIDAQABo4GmMIGjMB0GA1UdDgQWBBSlsScdgCYTCMJqOD+r5Rd5uxe4lzBKBggrBgEFBQcBAQQ+MDwwOgYIKwYBBQUHMAGGLmh0dHA6Ly9vY3NwLXRlc3RyZWYucm9vdC1jYS50aS1kaWVuc3RlLmRlL29jc3AwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwFQYDVR0gBA4wDDAKBggqghQATASBIzANBgkqhkiG9w0BAQsFAAOCAQEAB5gbLFq1cyXLvpUOefCfR2uINqzCpv3nZAwVEgWSXNEWBdzPUNriOKnBlyFssoGROT/scncAG+x8sSvctxzhkL+fJQfrsPow7KqQdi1RaJcJ32W6v0E8YejAgtLx51u3q93klSupS29axqmbups6j9qDu3eF0rddZduQqd55Hxjhjg5YDkg9NyA7E/W4tgh/RYZfWi+r6TQX6dp1yfYZNZEmi4IU0+H4b2pZUaNKq6u2Wxuf9STac+TAB7tHGxvOSLyEK8wNcHfPjD9mfhzoWe2hgf1G8iagggAyVygHXcBwy9mHPWJ3BKzopLhwY45nPRYOYrLrF9gFgEYB7aUyKQ==",
        "cn": "GEM.RCA1 TEST-ONLY",
        "name": "RCA1 TEST-ONLY",
        "next": "",
        "nva": "2024-02-18T13:54:31",
        "nvb": "2014-02-20T13:54:31",
        "prev": "",
        "ski": "A5B1271D80261308C26A383FABE51779BB17B897"
    },
    {
        "cert": "MIIEJjCCAw6gAwIBAgIBATANBgkqhkiG9w0BAQsFADCBgTELMAkGA1UEBhMCREUxHzAdBgNVBAoMFmdlbWF0aWsgR21iSCBOT1QtVkFMSUQxNDAyBgNVBAsMK1plbnRyYWxlIFJvb3QtQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxGzAZBgNVBAMMEkdFTS5SQ0EyIFRFU1QtT05MWTAeFw0xNjExMTcxNTUwNTdaFw0yNjExMTUxNTUwNTdaMIGBMQswCQYDVQQGEwJERTEfMB0GA1UECgwWZ2VtYXRpayBHbWJIIE5PVC1WQUxJRDE0MDIGA1UECwwrWmVudHJhbGUgUm9vdC1DQSBkZXIgVGVsZW1hdGlraW5mcmFzdHJ1a3R1cjEbMBkGA1UEAwwSR0VNLlJDQTIgVEVTVC1PTkxZMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAymBHUufkzEqjXvCxEPCWUp80vuk8pyXVv/IMngAu87GFjQW62xYtcQDWICaeLEoWIybEF/JKm6vbSCnqIFYP5BsrOPXPY6B56Xb6PatxqS2AXbYxr0Jkl5K1HPWCK7jZlYep/tfhw+Xo/IoYMSkDb0CfNb5GCYJauIN8lOGLbHiMg6oMLfxvTniQA3g4cfdzsbo4f9kAkDZxqmoZLduhcXv31g/JDdds1BIgiiu1iUbr2KOYRw2Ya0gvJ8ec2RMioC87uvyzbofuvSBK5T49pjSsgIne7OKPnBz1mfVD1g37IYVNFOgWyOFKKoZU7ryYdizWNcs/tzVACd5VRqMPYwIDAQABo4GmMIGjMB0GA1UdDgQWBBQtaQC7ofTMjgOiJYOSydJj4dlEuDBKBggrBgEFBQcBAQQ+MDwwOgYIKwYBBQUHMAGGLmh0dHA6Ly9vY3NwLXRlc3RyZWYucm9vdC1jYS50aS1kaWVuc3RlLmRlL29jc3AwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwFQYDVR0gBA4wDDAKBggqghQATASBIzANBgkqhkiG9w0BAQsFAAOCAQEAYKSf2amC76MNsioVHPn/s6m+5nsDwrPwJ5+GiC/Q3wCnb1RPxGqwToJ6vfkNEB5zC2ZImDXuLKXXiLhOef/C2+bBNk8GqWkEN/l7FBk9FvjzaS++y3Rebt5lEmxYyajls/vN++v+FLuz1c7t1r9XVoTBc0kEpuUwt+cm+oFAh0raaP/hEIKf6+ThsSMiKc2KLzN4Qx7JudYu7VFtPj41ETkX/ccSBh8rlnECtiBbvhDh9Bxo9M3yZRox7XnmZy3slYC2V2yS3w+NQzq8iBwsGKKXpIxUQ9+A7/IzCPn5BlzSKAI8ygnD5MqiRzCmjyvxdsrZlwvklBdVL0E5pfS8Fg==",
        "cn": "GEM.RCA2 TEST-ONLY",
        "name": "RCA2 TEST-ONLY",
        "next": "",
        "nva": "2026-11-15T15:50:57",
        "nvb": "2016-11-17T15:50:57",
        "prev": "MIIERzCCAy+gAwIBAgIBPTANBgkqhkiG9w0BAQsFADCBgTEbMBkGA1UEAwwSR0VNLlJDQTEgVEVTVC1PTkxZMTQwMgYDVQQLDCtaZW50cmFsZSBSb290LUNBIGRlciBUZWxlbWF0aWtpbmZyYXN0cnVrdHVyMR8wHQYDVQQKDBZnZW1hdGlrIEdtYkggTk9ULVZBTElEMQswCQYDVQQGEwJERTAeFw0xNjExMTcxNjAwNDZaFw0yNDAyMTgxMzU0MzFaMIGBMQswCQYDVQQGEwJERTEfMB0GA1UECgwWZ2VtYXRpayBHbWJIIE5PVC1WQUxJRDE0MDIGA1UECwwrWmVudHJhbGUgUm9vdC1DQSBkZXIgVGVsZW1hdGlraW5mcmFzdHJ1a3R1cjEbMBkGA1UEAwwSR0VNLlJDQTIgVEVTVC1PTkxZMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAymBHUufkzEqjXvCxEPCWUp80vuk8pyXVv/IMngAu87GFjQW62xYtcQDWICaeLEoWIybEF/JKm6vbSCnqIFYP5BsrOPXPY6B56Xb6PatxqS2AXbYxr0Jkl5K1HPWCK7jZlYep/tfhw+Xo/IoYMSkDb0CfNb5GCYJauIN8lOGLbHiMg6oMLfxvTniQA3g4cfdzsbo4f9kAkDZxqmoZLduhcXv31g/JDdds1BIgiiu1iUbr2KOYRw2Ya0gvJ8ec2RMioC87uvyzbofuvSBK5T49pjSsgIne7OKPnBz1mfVD1g37IYVNFOgWyOFKKoZU7ryYdizWNcs/tzVACd5VRqMPYwIDAQABo4HHMIHEMB0GA1UdDgQWBBQtaQC7ofTMjgOiJYOSydJj4dlEuDAfBgNVHSMEGDAWgBSlsScdgCYTCMJqOD+r5Rd5uxe4lzBKBggrBgEFBQcBAQQ+MDwwOgYIKwYBBQUHMAGGLmh0dHA6Ly9vY3NwLXRlc3RyZWYucm9vdC1jYS50aS1kaWVuc3RlLmRlL29jc3AwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwFQYDVR0gBA4wDDAKBggqghQATASBIzANBgkqhkiG9w0BAQsFAAOCAQEAr6I6k00OKrOJAuzpFpknjWrUbfhvk1MdKoCeGAjEDEXUhQaHUFO0A+WrJwO18A+qoL8kei9M3zyFey9wahh/EETQm5X2dptxYpjlqDk2w3gp4TyZG2W1B/RH7FEOTRcZ+aSY5XxIvZY1/+LWK8w6I36M5JG//mT+59qOZkF7QaRhDgmgfh6MoSF4ZTisjh9ghBpHEqyqVnAA3MyhAyWdIh1uYBWfoPyeMFhDoW5biBk/TZjeNY1N4Hr8y5NKmaqH19sOOrDTSqtThIg2r7dbKj54bvGq8W+3HIRDe/UW4/m+wMeWylgG13FQDYMgz6vjBqLT++dsNeHefKSj4MjzcQ==",
        "ski": "2D6900BBA1F4CC8E03A2258392C9D263E1D944B8"
    },
    {
        "cert": "MIICkzCCAjmgAwIBAgIBATAKBggqhkjOPQQDAjCBgTELMAkGA1UEBhMCREUxHzAdBgNVBAoMFmdlbWF0aWsgR21iSCBOT1QtVkFMSUQxNDAyBgNVBAsMK1plbnRyYWxlIFJvb3QtQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxGzAZBgNVBAMMEkdFTS5SQ0EzIFRFU1QtT05MWTAeFw0xNzA4MTEwODM4NDVaFw0yNzA4MDkwODM4NDVaMIGBMQswCQYDVQQGEwJERTEfMB0GA1UECgwWZ2VtYXRpayBHbWJIIE5PVC1WQUxJRDE0MDIGA1UECwwrWmVudHJhbGUgUm9vdC1DQSBkZXIgVGVsZW1hdGlraW5mcmFzdHJ1a3R1cjEbMBkGA1UEAwwSR0VNLlJDQTMgVEVTVC1PTkxZMFowFAYHKoZIzj0CAQYJKyQDAwIIAQEHA0IABG+raY8OSxIEfrDwz4K4K1HXLXbd0ZzAKtD9SUDtSexnfsai8lkY8rM59TLky//HB8QDkyZewRPXClwpXCrj5HOjgZ4wgZswHQYDVR0OBBYEFAeQMy11U15/+Mg3v37JJldo3zjSMEIGCCsGAQUFBwEBBDYwNDAyBggrBgEFBQcwAYYmaHR0cDovL29jc3Aucm9vdC1jYS50aS1kaWVuc3RlLmRlL29jc3AwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwFQYDVR0gBA4wDDAKBggqghQATASBIzAKBggqhkjOPQQDAgNIADBFAiEAo4kNteSBVR4ovNeTBhkiSXsWzdRC0tQeMfItsE0s7/8CIDZ3EQxclVBV3huM8Bzl9ePbNsV+Lvnjv+Fo1om5+xJ2",
        "cn": "GEM.RCA3 TEST-ONLY",
        "name": "RCA3 TEST-ONLY",
        "next": "MIICuzCCAmKgAwIBAgIBAjAKBggqhkjOPQQDAjCBgTELMAkGA1UEBhMCREUxHzAdBgNVBAoMFmdlbWF0aWsgR21iSCBOT1QtVkFMSUQxNDAyBgNVBAsMK1plbnRyYWxlIFJvb3QtQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxGzAZBgNVBAMMEkdFTS5SQ0E0IFRFU1QtT05MWTAeFw0xOTA4MDcxMDI0MTlaFw0yNzA4MTAxMDI0MThaMIGBMQswCQYDVQQGEwJERTEfMB0GA1UECgwWZ2VtYXRpayBHbWJIIE5PVC1WQUxJRDE0MDIGA1UECwwrWmVudHJhbGUgUm9vdC1DQSBkZXIgVGVsZW1hdGlraW5mcmFzdHJ1a3R1cjEbMBkGA1UEAwwSR0VNLlJDQTMgVEVTVC1PTkxZMFowFAYHKoZIzj0CAQYJKyQDAwIIAQEHA0IABG+raY8OSxIEfrDwz4K4K1HXLXbd0ZzAKtD9SUDtSexnfsai8lkY8rM59TLky//HB8QDkyZewRPXClwpXCrj5HOjgccwgcQwHQYDVR0OBBYEFAeQMy11U15/+Mg3v37JJldo3zjSMB8GA1UdIwQYMBaAFFHb2WZCs0orP1csVI2Fcx3nV89/MEoGCCsGAQUFBwEBBD4wPDA6BggrBgEFBQcwAYYuaHR0cDovL29jc3AtdGVzdHJlZi5yb290LWNhLnRpLWRpZW5zdGUuZGUvb2NzcDAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBBjAVBgNVHSAEDjAMMAoGCCqCFABMBIEjMAoGCCqGSM49BAMCA0cAMEQCIGW3DHpdy0ztC5Fl7CR2tUb08EiGNNsuuP11X7A0I8JjAiB9GP7z4gShBAEoPH23Z/7nH13xtGhAUA5d2v7t16MWkw==",
        "nva": "2027-08-09T08:38:45",
        "nvb": "2017-08-11T08:38:45",
        "prev": "MIIDfTCCAmWgAwIBAgIBGzANBgkqhkiG9w0BAQsFADCBgTELMAkGA1UEBhMCREUxHzAdBgNVBAoMFmdlbWF0aWsgR21iSCBOT1QtVkFMSUQxNDAyBgNVBAsMK1plbnRyYWxlIFJvb3QtQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxGzAZBgNVBAMMEkdFTS5SQ0EyIFRFU1QtT05MWTAeFw0xNzA4MTEwODQ0MzFaFw0yNTA4MDkwODQ0MzBaMIGBMQswCQYDVQQGEwJERTEfMB0GA1UECgwWZ2VtYXRpayBHbWJIIE5PVC1WQUxJRDE0MDIGA1UECwwrWmVudHJhbGUgUm9vdC1DQSBkZXIgVGVsZW1hdGlraW5mcmFzdHJ1a3R1cjEbMBkGA1UEAwwSR0VNLlJDQTMgVEVTVC1PTkxZMFowFAYHKoZIzj0CAQYJKyQDAwIIAQEHA0IABG+raY8OSxIEfrDwz4K4K1HXLXbd0ZzAKtD9SUDtSexnfsai8lkY8rM59TLky//HB8QDkyZewRPXClwpXCrj5HOjgccwgcQwHQYDVR0OBBYEFAeQMy11U15/+Mg3v37JJldo3zjSMB8GA1UdIwQYMBaAFC1pALuh9MyOA6Ilg5LJ0mPh2US4MEoGCCsGAQUFBwEBBD4wPDA6BggrBgEFBQcwAYYuaHR0cDovL29jc3AtdGVzdHJlZi5yb290LWNhLnRpLWRpZW5zdGUuZGUvb2NzcDAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBBjAVBgNVHSAEDjAMMAoGCCqCFABMBIEjMA0GCSqGSIb3DQEBCwUAA4IBAQCc2H/83JiPD4js6pwU9QHAH693oON6fJg8LTbWTsQXARqFnNzJfa4z/IVPLnYQLZz5x6DQOx/muqFenG0BO15m4+UuqmxVkNiBViD2HBOaZT4r1LMS5ZWTfTnP2vGBI7ceMWWc2wTNgBxpIal13R2O4KheIgQD9gvxZulngy12tg0xc8lLsLxRs+NHZoUqJazsmu3NcNvR5tP3Ys82W9vI5qO3S8x5/jZ+/z/bmeh4XrLYoEAaIaZV3Swo4KrzLJ1dpRBLuj7oN4IxNIND37zXevNmihtN9wYcNuiaLZc7kVqmhogIzLU0YGVJjBMekh4ozq0k71EmrAsZbSJ3UGn3",
        "ski": "0790332D75535E7FF8C837BF7EC9265768DF38D2"
    },
    {
        "cert": "MIICmzCCAkGgAwIBAgIBATAKBggqhkjOPQQDAjCBgTELMAkGA1UEBhMCREUxHzAdBgNVBAoMFmdlbWF0aWsgR21iSCBOT1QtVkFMSUQxNDAyBgNVBAsMK1plbnRyYWxlIFJvb3QtQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxGzAZBgNVBAMMEkdFTS5SQ0E0IFRFU1QtT05MWTAeFw0xOTA4MDcxMDE0NDZaFw0yOTA4MDQxMDE0NDZaMIGBMQswCQYDVQQGEwJERTEfMB0GA1UECgwWZ2VtYXRpayBHbWJIIE5PVC1WQUxJRDE0MDIGA1UECwwrWmVudHJhbGUgUm9vdC1DQSBkZXIgVGVsZW1hdGlraW5mcmFzdHJ1a3R1cjEbMBkGA1UEAwwSR0VNLlJDQTQgVEVTVC1PTkxZMFowFAYHKoZIzj0CAQYJKyQDAwIIAQEHA0IABD2om+MtwPSn89HGErbYvxjoWRwHoO/JJXf51n8L/NsdPjZUIVrveL/ydaJJZNaEx4syq/O5e8Q5WkEFB8kbm5SjgaYwgaMwHQYDVR0OBBYEFFHb2WZCs0orP1csVI2Fcx3nV89/MEoGCCsGAQUFBwEBBD4wPDA6BggrBgEFBQcwAYYuaHR0cDovL29jc3AtdGVzdHJlZi5yb290LWNhLnRpLWRpZW5zdGUuZGUvb2NzcDAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB/wQEAwIBBjAVBgNVHSAEDjAMMAoGCCqCFABMBIEjMAoGCCqGSM49BAMCA0gAMEUCIQCfj1wZoRGcuQRbUO3GdaPU+ZYDbfogGQ1HfHn/ZRxHvwIgTDRCdNBPyo2vKq7OjcVmeU4+OmHJh7LYQsrRZkqDnQk=",
        "cn": "GEM.RCA4 TEST-ONLY",
        "name": "RCA4 TEST-ONLY",
        "next": "MIIC7DCCApOgAwIBAgIBAjAKBggqhkjOPQQDAjCBgTELMAkGA1UEBhMCREUxHzAdBgNVBAoMFmdlbWF0aWsgR21iSCBOT1QtVkFMSUQxNDAyBgNVBAsMK1plbnRyYWxlIFJvb3QtQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxGzAZBgNVBAMMEkdFTS5SQ0E1IFRFU1QtT05MWTAeFw0yMTA3MjMxMTI5MDlaFw0yOTA4MDQxMTI5MDhaMIGBMQswCQYDVQQGEwJERTEfMB0GA1UECgwWZ2VtYXRpayBHbWJIIE5PVC1WQUxJRDE0MDIGA1UECwwrWmVudHJhbGUgUm9vdC1DQSBkZXIgVGVsZW1hdGlraW5mcmFzdHJ1a3R1cjEbMBkGA1UEAwwSR0VNLlJDQTQgVEVTVC1PTkxZMFowFAYHKoZIzj0CAQYJKyQDAwIIAQEHA0IABD2om+MtwPSn89HGErbYvxjoWRwHoO/JJXf51n8L/NsdPjZUIVrveL/ydaJJZNaEx4syq/O5e8Q5WkEFB8kbm5SjgfgwgfUwHQYDVR0OBBYEFFHb2WZCs0orP1csVI2Fcx3nV89/MB8GA1UdIwQYMBaAFOGt4Af80iB5JPTcl70yZM1rFIUJMEoGCCsGAQUFBwEBBD4wPDA6BggrBgEFBQcwAYYuaHR0cDovL29jc3AtdGVzdHJlZi5yb290LWNhLnRpLWRpZW5zdGUuZGUvb2NzcDAOBgNVHQ8BAf8EBAMCAQYwRgYDVR0gBD8wPTA7BggqghQATASBIzAvMC0GCCsGAQUFBwIBFiFodHRwOi8vd3d3LmdlbWF0aWsuZGUvZ28vcG9saWNpZXMwDwYDVR0TAQH/BAUwAwEB/zAKBggqhkjOPQQDAgNHADBEAiB7vjuISB0u5Qh2F9bjnLCj1HhOwZjNN/xg1w4+QCPMBQIgPvnaw1wzvMwaXiq21mzTOqHctLXW2NvrI2m+V8u8ygk=",
        "nva": "2029-08-04T10:14:46",
        "nvb": "2019-08-07T10:14:46",
        "prev": "MIICtDCCAlqgAwIBAgIBKzAKBggqhkjOPQQDAjCBgTELMAkGA1UEBhMCREUxHzAdBgNVBAoMFmdlbWF0aWsgR21iSCBOT1QtVkFMSUQxNDAyBgNVBAsMK1plbnRyYWxlIFJvb3QtQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxGzAZBgNVBAMMEkdFTS5SQ0EzIFRFU1QtT05MWTAeFw0xOTA4MDcxMDE3MjdaFw0yNzA4MDkwODM4NDVaMIGBMQswCQYDVQQGEwJERTEfMB0GA1UECgwWZ2VtYXRpayBHbWJIIE5PVC1WQUxJRDE0MDIGA1UECwwrWmVudHJhbGUgUm9vdC1DQSBkZXIgVGVsZW1hdGlraW5mcmFzdHJ1a3R1cjEbMBkGA1UEAwwSR0VNLlJDQTQgVEVTVC1PTkxZMFowFAYHKoZIzj0CAQYJKyQDAwIIAQEHA0IABD2om+MtwPSn89HGErbYvxjoWRwHoO/JJXf51n8L/NsdPjZUIVrveL/ydaJJZNaEx4syq/O5e8Q5WkEFB8kbm5Sjgb8wgbwwHQYDVR0OBBYEFFHb2WZCs0orP1csVI2Fcx3nV89/MB8GA1UdIwQYMBaAFAeQMy11U15/+Mg3v37JJldo3zjSMEIGCCsGAQUFBwEBBDYwNDAyBggrBgEFBQcwAYYmaHR0cDovL29jc3Aucm9vdC1jYS50aS1kaWVuc3RlLmRlL29jc3AwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwFQYDVR0gBA4wDDAKBggqghQATASBIzAKBggqhkjOPQQDAgNIADBFAiEAi3HsZud766MjjCBamvjY0PJ9nSNhWEgO3dv+3CRZbvwCIF/Ftch7+izD9L7Q/BhqlxS9Pr5Zv6nBDjbUze6qzuNv",
        "ski": "51DBD96642B34A2B3F572C548D85731DE757CF7F"
    },
    {
        "cert": "MIICyzCCAnKgAwIBAgIBATAKBggqhkjOPQQDAjCBgTELMAkGA1UEBhMCREUxHzAdBgNVBAoMFmdlbWF0aWsgR21iSCBOT1QtVkFMSUQxNDAyBgNVBAsMK1plbnRyYWxlIFJvb3QtQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxGzAZBgNVBAMMEkdFTS5SQ0E1IFRFU1QtT05MWTAeFw0yMTA3MjIxMjU0MTFaFw0zMTA3MjAxMjU0MTFaMIGBMQswCQYDVQQGEwJERTEfMB0GA1UECgwWZ2VtYXRpayBHbWJIIE5PVC1WQUxJRDE0MDIGA1UECwwrWmVudHJhbGUgUm9vdC1DQSBkZXIgVGVsZW1hdGlraW5mcmFzdHJ1a3R1cjEbMBkGA1UEAwwSR0VNLlJDQTUgVEVTVC1PTkxZMFowFAYHKoZIzj0CAQYJKyQDAwIIAQEHA0IABJukjjeYlo6B3WTeNVof861qQRIa3ZcAkUyj1zMER6I+aley7K/U1XCFQ72ADk9qoRAYNspYA1dVQiFsXML32PWjgdcwgdQwHQYDVR0OBBYEFOGt4Af80iB5JPTcl70yZM1rFIUJMEoGCCsGAQUFBwEBBD4wPDA6BggrBgEFBQcwAYYuaHR0cDovL29jc3AtdGVzdHJlZi5yb290LWNhLnRpLWRpZW5zdGUuZGUvb2NzcDAOBgNVHQ8BAf8EBAMCAQYwRgYDVR0gBD8wPTA7BggqghQATASBIzAvMC0GCCsGAQUFBwIBFiFodHRwOi8vd3d3LmdlbWF0aWsuZGUvZ28vcG9saWNpZXMwDwYDVR0TAQH/BAUwAwEB/zAKBggqhkjOPQQDAgNHADBEAiAGnycg02dlaa1JGjN2g2NGc28jj4yuHQZrOb0yDWrgVQIgBRqGkgNF8R2HTjHZpW/ImKbvHoO6iV1AwzfFl1uzdG0=",
        "cn": "GEM.RCA5 TEST-ONLY",
        "name": "RCA5 TEST-ONLY",
        "next": "MIIDrjCCApagAwIBAgIBAjANBgkqhkiG9w0BAQsFADCBgTELMAkGA1UEBhMCREUxHzAdBgNVBAoMFmdlbWF0aWsgR21iSCBOT1QtVkFMSUQxNDAyBgNVBAsMK1plbnRyYWxlIFJvb3QtQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxGzAZBgNVBAMMEkdFTS5SQ0E2IFRFU1QtT05MWTAeFw0yMTEwMjgwNzI5MjdaFw0zMTA3MjAwNzI5MjZaMIGBMQswCQYDVQQGEwJERTEfMB0GA1UECgwWZ2VtYXRpayBHbWJIIE5PVC1WQUxJRDE0MDIGA1UECwwrWmVudHJhbGUgUm9vdC1DQSBkZXIgVGVsZW1hdGlraW5mcmFzdHJ1a3R1cjEbMBkGA1UEAwwSR0VNLlJDQTUgVEVTVC1PTkxZMFowFAYHKoZIzj0CAQYJKyQDAwIIAQEHA0IABJukjjeYlo6B3WTeNVof861qQRIa3ZcAkUyj1zMER6I+aley7K/U1XCFQ72ADk9qoRAYNspYA1dVQiFsXML32PWjgfgwgfUwHQYDVR0OBBYEFOGt4Af80iB5JPTcl70yZM1rFIUJMB8GA1UdIwQYMBaAFEz34GVYVZjmOYvIB3U9TKZwLM8pMEoGCCsGAQUFBwEBBD4wPDA6BggrBgEFBQcwAYYuaHR0cDovL29jc3AtdGVzdHJlZi5yb290LWNhLnRpLWRpZW5zdGUuZGUvb2NzcDAOBgNVHQ8BAf8EBAMCAQYwRgYDVR0gBD8wPTA7BggqghQATASBIzAvMC0GCCsGAQUFBwIBFiFodHRwOi8vd3d3LmdlbWF0aWsuZGUvZ28vcG9saWNpZXMwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEANE4Sisi+c12IxO7nZZDiMh5YiWM0W/qouw5FkzBjUICVrXIAZlrXCMbGmsu2Abl1q7kzVXh3fUvzSiqswiKaSDHH6aOHLtik+oAgoOp5g6VR+Saf03dzCj85p8wbAWrTmQ6Djgz5iAAU9RMSD8zVn6DoCbyeeVEWOOYeWM+5uh12H1M+xGOl9Nb5RG4CmUIYPAVH7WaU1cLJX3gsQx0vTKahF1Q2ruyzpaLvB2BtK3E7GBH1JOwsLjyuqrQjYmtmZf29Bue6QY3MUT/ottu9UN3xWc4jKl+1M4pUUdOAu4pD+ci1wjUV4IOJEUE1f/9CJm9s4d+Vqrna3kdMvmMlFw==",
        "nva": "2031-07-20T12:54:11",
        "nvb": "2021-07-22T12:54:11",
        "prev": "MIIC7DCCApOgAwIBAgIBKTAKBggqhkjOPQQDAjCBgTELMAkGA1UEBhMCREUxHzAdBgNVBAoMFmdlbWF0aWsgR21iSCBOT1QtVkFMSUQxNDAyBgNVBAsMK1plbnRyYWxlIFJvb3QtQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxGzAZBgNVBAMMEkdFTS5SQ0E0IFRFU1QtT05MWTAeFw0yMTA3MjMxMTMyNDlaFw0yOTA4MDQxMDE0NDZaMIGBMQswCQYDVQQGEwJERTEfMB0GA1UECgwWZ2VtYXRpayBHbWJIIE5PVC1WQUxJRDE0MDIGA1UECwwrWmVudHJhbGUgUm9vdC1DQSBkZXIgVGVsZW1hdGlraW5mcmFzdHJ1a3R1cjEbMBkGA1UEAwwSR0VNLlJDQTUgVEVTVC1PTkxZMFowFAYHKoZIzj0CAQYJKyQDAwIIAQEHA0IABJukjjeYlo6B3WTeNVof861qQRIa3ZcAkUyj1zMER6I+aley7K/U1XCFQ72ADk9qoRAYNspYA1dVQiFsXML32PWjgfgwgfUwHQYDVR0OBBYEFOGt4Af80iB5JPTcl70yZM1rFIUJMB8GA1UdIwQYMBaAFFHb2WZCs0orP1csVI2Fcx3nV89/MEoGCCsGAQUFBwEBBD4wPDA6BggrBgEFBQcwAYYuaHR0cDovL29jc3AtdGVzdHJlZi5yb290LWNhLnRpLWRpZW5zdGUuZGUvb2NzcDAOBgNVHQ8BAf8EBAMCAQYwRgYDVR0gBD8wPTA7BggqghQATASBIzAvMC0GCCsGAQUFBwIBFiFodHRwOi8vd3d3LmdlbWF0aWsuZGUvZ28vcG9saWNpZXMwDwYDVR0TAQH/BAUwAwEB/zAKBggqhkjOPQQDAgNHADBEAiAryU2k1dZAABPmVWBJtxjNooi1421TIilqn1vqztaG6wIgajX6VL8Kek6S3L6B55WX5wxv9a20NtzbI4/nSF4LlPE=",
        "ski": "E1ADE007FCD2207924F4DC97BD3264CD6B148509"
    },
    {
        "cert": "MIIEVzCCAz+gAwIBAgIBATANBgkqhkiG9w0BAQsFADCBgTELMAkGA1UEBhMCREUxHzAdBgNVBAoMFmdlbWF0aWsgR21iSCBOT1QtVkFMSUQxNDAyBgNVBAsMK1plbnRyYWxlIFJvb3QtQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxGzAZBgNVBAMMEkdFTS5SQ0E2IFRFU1QtT05MWTAeFw0yMTEwMjgwNzI0MTRaFw0zMTEwMjYwNzI0MTRaMIGBMQswCQYDVQQGEwJERTEfMB0GA1UECgwWZ2VtYXRpayBHbWJIIE5PVC1WQUxJRDE0MDIGA1UECwwrWmVudHJhbGUgUm9vdC1DQSBkZXIgVGVsZW1hdGlraW5mcmFzdHJ1a3R1cjEbMBkGA1UEAwwSR0VNLlJDQTYgVEVTVC1PTkxZMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvnQeiBEfnRD7wzhhF7Ah0LnVKdm7XkhQfrVbfIcJSmFyIWXYJhrui3oYErcVBDhcEiHqB8EptvyiPW4TH76LTq1ea6ulvr/OzdwnMc8N9RiYjiPr4rLo/8SBPo0crxfAUkLVmnokipGkv+AESuCfzFmNnd1D1pd/NI3dF1++QWZ1CT4VlYEL73YQko4DRlyIVJl/LPNZXwCmImlWCkNABVINRXyKhG2AAmOYKrJQ0DhC17HadToLwd1jKtfYqHjC28kdPeVA30hQY4C+Wb6XeAAFAnruY6lBkeav6i2Do64Plac+8nzYhhHwU4dHinYcpz/FN3nhzu87eX5qyVY1XwIDAQABo4HXMIHUMB0GA1UdDgQWBBRM9+BlWFWY5jmLyAd1PUymcCzPKTBKBggrBgEFBQcBAQQ+MDwwOgYIKwYBBQUHMAGGLmh0dHA6Ly9vY3NwLXRlc3RyZWYucm9vdC1jYS50aS1kaWVuc3RlLmRlL29jc3AwDgYDVR0PAQH/BAQDAgEGMEYGA1UdIAQ/MD0wOwYIKoIUAEwEgSMwLzAtBggrBgEFBQcCARYhaHR0cDovL3d3dy5nZW1hdGlrLmRlL2dvL3BvbGljaWVzMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBABrZ8L5dWphMF2qWTVUGt77Ecpx1N2dSjpdcWjTP8q6FS2KruTBnZhsxN5ScnRLtQL6yovOblkpuyXDhBjp3ciY0e+WzNJrqNLGjMXkCKL+tk4cO3dQyIdexDL7nQ9cJg2dAYn5jIy068K2e5hHA9SgBbXyyxo/KreVrVi7n8wHG9wNmCxJahnLDut+ec/sMHowiAsmHg09WZ5UVkqTU0tgVrYyKWzHCpHsyrTaPZSMfJevX9vwIgD7CCdxl2sZgFod55EATIraGwbAXmtzyhIYtIBPrRmyNKU5uIuwD3/JENKLN4ngFsoeqUy/iXRkBmldakh3gSARd9usyaMaQ4cQ=",
        "cn": "GEM.RCA6 TEST-ONLY",
        "name": "RCA6 TEST-ONLY",
        "next": "MIIDtjCCA12gAwIBAgIBAzAKBggqhkjOPQQDAjCBgTELMAkGA1UEBhMCREUxHzAdBgNVBAoMFmdlbWF0aWsgR21iSCBOT1QtVkFMSUQxNDAyBgNVBAsMK1plbnRyYWxlIFJvb3QtQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxGzAZBgNVBAMMEkdFTS5SQ0E4IFRFU1QtT05MWTAeFw0yMzEyMDcxMDM2MzJaFw0zMTEwMjYxMDM2MzFaMIGBMQswCQYDVQQGEwJERTEfMB0GA1UECgwWZ2VtYXRpayBHbWJIIE5PVC1WQUxJRDE0MDIGA1UECwwrWmVudHJhbGUgUm9vdC1DQSBkZXIgVGVsZW1hdGlraW5mcmFzdHJ1a3R1cjEbMBkGA1UEAwwSR0VNLlJDQTYgVEVTVC1PTkxZMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvnQeiBEfnRD7wzhhF7Ah0LnVKdm7XkhQfrVbfIcJSmFyIWXYJhrui3oYErcVBDhcEiHqB8EptvyiPW4TH76LTq1ea6ulvr/OzdwnMc8N9RiYjiPr4rLo/8SBPo0crxfAUkLVmnokipGkv+AESuCfzFmNnd1D1pd/NI3dF1++QWZ1CT4VlYEL73YQko4DRlyIVJl/LPNZXwCmImlWCkNABVINRXyKhG2AAmOYKrJQ0DhC17HadToLwd1jKtfYqHjC28kdPeVA30hQY4C+Wb6XeAAFAnruY6lBkeav6i2Do64Plac+8nzYhhHwU4dHinYcpz/FN3nhzu87eX5qyVY1XwIDAQABo4H4MIH1MB0GA1UdDgQWBBRM9+BlWFWY5jmLyAd1PUymcCzPKTAfBgNVHSMEGDAWgBShuRQ6JzB7XGce9TLEsdUaify8UzBKBggrBgEFBQcBAQQ+MDwwOgYIKwYBBQUHMAGGLmh0dHA6Ly9vY3NwLXRlc3RyZWYucm9vdC1jYS50aS1kaWVuc3RlLmRlL29jc3AwDgYDVR0PAQH/BAQDAgEGMEYGA1UdIAQ/MD0wOwYIKoIUAEwEgSMwLzAtBggrBgEFBQcCARYhaHR0cDovL3d3dy5nZW1hdGlrLmRlL2dvL3BvbGljaWVzMA8GA1UdEwEB/wQFMAMBAf8wCgYIKoZIzj0EAwIDRwAwRAIgUyPfuzsCPWpoxzB6PT0NzTSWssU3pHtwGlMYm8aUNuQCIHAce0F2AV3bfeH6pXWq4LzlEzo5adVxGxLULBxFaXtq",
        "nva": "2031-10-26T07:24:14",
        "nvb": "2021-10-28T07:24:14",
        "prev": "MIIDtjCCA12gAwIBAgIBDDAKBggqhkjOPQQDAjCBgTELMAkGA1UEBhMCREUxHzAdBgNVBAoMFmdlbWF0aWsgR21iSCBOT1QtVkFMSUQxNDAyBgNVBAsMK1plbnRyYWxlIFJvb3QtQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxGzAZBgNVBAMMEkdFTS5SQ0E1IFRFU1QtT05MWTAeFw0yMTEwMjgwNzM0MjZaFw0zMTA3MjAwNzM0MjVaMIGBMQswCQYDVQQGEwJERTEfMB0GA1UECgwWZ2VtYXRpayBHbWJIIE5PVC1WQUxJRDE0MDIGA1UECwwrWmVudHJhbGUgUm9vdC1DQSBkZXIgVGVsZW1hdGlraW5mcmFzdHJ1a3R1cjEbMBkGA1UEAwwSR0VNLlJDQTYgVEVTVC1PTkxZMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvnQeiBEfnRD7wzhhF7Ah0LnVKdm7XkhQfrVbfIcJSmFyIWXYJhrui3oYErcVBDhcEiHqB8EptvyiPW4TH76LTq1ea6ulvr/OzdwnMc8N9RiYjiPr4rLo/8SBPo0crxfAUkLVmnokipGkv+AESuCfzFmNnd1D1pd/NI3dF1++QWZ1CT4VlYEL73YQko4DRlyIVJl/LPNZXwCmImlWCkNABVINRXyKhG2AAmOYKrJQ0DhC17HadToLwd1jKtfYqHjC28kdPeVA30hQY4C+Wb6XeAAFAnruY6lBkeav6i2Do64Plac+8nzYhhHwU4dHinYcpz/FN3nhzu87eX5qyVY1XwIDAQABo4H4MIH1MB0GA1UdDgQWBBRM9+BlWFWY5jmLyAd1PUymcCzPKTAfBgNVHSMEGDAWgBThreAH/NIgeST03Je9MmTNaxSFCTBKBggrBgEFBQcBAQQ+MDwwOgYIKwYBBQUHMAGGLmh0dHA6Ly9vY3NwLXRlc3RyZWYucm9vdC1jYS50aS1kaWVuc3RlLmRlL29jc3AwDgYDVR0PAQH/BAQDAgEGMEYGA1UdIAQ/MD0wOwYIKoIUAEwEgSMwLzAtBggrBgEFBQcCARYhaHR0cDovL3d3dy5nZW1hdGlrLmRlL2dvL3BvbGljaWVzMA8GA1UdEwEB/wQFMAMBAf8wCgYIKoZIzj0EAwIDRwAwRAIgFL1kx8WwpvE6Z1Qgxp3hVuuFmtJboMFphPnqrSnI0bECICDH1I7wiv/0M9F+OtOryHifOrGUXc13uj0vjULnPMMo",
        "ski": "4CF7E065585598E6398BC807753D4CA6702CCF29"
    },
    {
        "cert": "MIICyjCCAnKgAwIBAgIBATAKBggqhkjOPQQDAjCBgTELMAkGA1UEBhMCREUxHzAdBgNVBAoMFmdlbWF0aWsgR21iSCBOT1QtVkFMSUQxNDAyBgNVBAsMK1plbnRyYWxlIFJvb3QtQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxGzAZBgNVBAMMEkdFTS5SQ0E4IFRFU1QtT05MWTAeFw0yMzEyMDcxMDE3NTJaFw0zMzEyMDQxMDE3NTJaMIGBMQswCQYDVQQGEwJERTEfMB0GA1UECgwWZ2VtYXRpayBHbWJIIE5PVC1WQUxJRDE0MDIGA1UECwwrWmVudHJhbGUgUm9vdC1DQSBkZXIgVGVsZW1hdGlraW5mcmFzdHJ1a3R1cjEbMBkGA1UEAwwSR0VNLlJDQTggVEVTVC1PTkxZMFowFAYHKoZIzj0CAQYJKyQDAwIIAQEHA0IABDLncr51uoi5aGXoctM3aIm/tjMRXGu+57M1TUjwsy2HhyjEBaMWqlGMBcmcGZhbcKt/lepwcDk3EvGRmDJWGQ2jgdcwgdQwHQYDVR0OBBYEFKG5FDonMHtcZx71MsSx1RqJ/LxTMEoGCCsGAQUFBwEBBD4wPDA6BggrBgEFBQcwAYYuaHR0cDovL29jc3AtdGVzdHJlZi5yb290LWNhLnRpLWRpZW5zdGUuZGUvb2NzcDAOBgNVHQ8BAf8EBAMCAQYwRgYDVR0gBD8wPTA7BggqghQATASBIzAvMC0GCCsGAQUFBwIBFiFodHRwOi8vd3d3LmdlbWF0aWsuZGUvZ28vcG9saWNpZXMwDwYDVR0TAQH/BAUwAwEB/zAKBggqhkjOPQQDAgNGADBDAh9GANMYXG7LtOY83ffXG0MB/Hb1cGPV5umiJgyOlkpVAiAL+e32oEH1N625yww+4lgFd0LBg9gcFLQ87rEdlyCq1Q==",
        "cn": "GEM.RCA8 TEST-ONLY",
        "name": "RCA8 TEST-ONLY",
        "next": "",
        "nva": "2033-12-04T10:17:52",
        "nvb": "2023-12-07T10:17:52",
        "prev": "MIIDrjCCApagAwIBAgIBLjANBgkqhkiG9w0BAQsFADCBgTELMAkGA1UEBhMCREUxHzAdBgNVBAoMFmdlbWF0aWsgR21iSCBOT1QtVkFMSUQxNDAyBgNVBAsMK1plbnRyYWxlIFJvb3QtQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxGzAZBgNVBAMMEkdFTS5SQ0E2IFRFU1QtT05MWTAeFw0yMzEyMDcxMDM2NTdaFw0zMTEwMjYwNzI0MTRaMIGBMQswCQYDVQQGEwJERTEfMB0GA1UECgwWZ2VtYXRpayBHbWJIIE5PVC1WQUxJRDE0MDIGA1UECwwrWmVudHJhbGUgUm9vdC1DQSBkZXIgVGVsZW1hdGlraW5mcmFzdHJ1a3R1cjEbMBkGA1UEAwwSR0VNLlJDQTggVEVTVC1PTkxZMFowFAYHKoZIzj0CAQYJKyQDAwIIAQEHA0IABDLncr51uoi5aGXoctM3aIm/tjMRXGu+57M1TUjwsy2HhyjEBaMWqlGMBcmcGZhbcKt/lepwcDk3EvGRmDJWGQ2jgfgwgfUwHQYDVR0OBBYEFKG5FDonMHtcZx71MsSx1RqJ/LxTMB8GA1UdIwQYMBaAFEz34GVYVZjmOYvIB3U9TKZwLM8pMEoGCCsGAQUFBwEBBD4wPDA6BggrBgEFBQcwAYYuaHR0cDovL29jc3AtdGVzdHJlZi5yb290LWNhLnRpLWRpZW5zdGUuZGUvb2NzcDAOBgNVHQ8BAf8EBAMCAQYwRgYDVR0gBD8wPTA7BggqghQATASBIzAvMC0GCCsGAQUFBwIBFiFodHRwOi8vd3d3LmdlbWF0aWsuZGUvZ28vcG9saWNpZXMwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAg8in6H3CT8mNC//2ux1U7xIplOUJaFy8hJCtjOvmFp+QRvdpuKjp2pjHf+QVUXfbDj1hQcqewEi41yUZWq3wNijd3PD/o0vqUqyuxYyNc4dtem3zdneixiMohpD//vYcwLBf4aXKZM3dZXjA9D6RRHhEasDxmvGLbVbvabxQSNEzyULUgyN3ZM8blvvVC7QQjSRvUJzEnnuxcsbVa5iqkAU1Dh/IzhGHBTqoCMMEoh8UuxeHx8SHK5QGzRkXvvDLu3ba7sph52i/HXuuXCj+jsTVivnD+SYaXfGEkXEnOzdcmosOe/F/Lr6eRU6Y3ZKf6DgrkYsn8Xi1i5ye/U+j0w==",
        "ski": "A1B9143A27307B5C671EF532C4B1D51A89FCBC53"
    }
]
            """

gem_komp_ca50_cert = "MIIDUjCCAvigAwIBAgIBJTAKBggqhkjOPQQDAjCBgTELMAkGA1UEBhMCREUxHzAdBgNVBAoMFmdlbWF0aWsgR21iSCBOT1QtVkFMSUQxNDAyBgNVBAsMK1plbnRyYWxlIFJvb3QtQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxGzAZBgNVBAMMEkdFTS5SQ0E0IFRFU1QtT05MWTAeFw0yMTA2MTAxMDQ1MjJaFw0yOTA2MDgxMDQ1MjFaMIGEMQswCQYDVQQGEwJERTEfMB0GA1UECgwWZ2VtYXRpayBHbWJIIE5PVC1WQUxJRDEyMDAGA1UECwwpS29tcG9uZW50ZW4tQ0EgZGVyIFRlbGVtYXRpa2luZnJhc3RydWt0dXIxIDAeBgNVBAMMF0dFTS5LT01QLUNBNTAgVEVTVC1PTkxZMFowFAYHKoZIzj0CAQYJKyQDAwIIAQEHA0IABGDIQ/rR6jYzxjGyPmesnz5SbWNShsVyV4xDAkTYCqYrDCcsT8hYY7f/i9SvsePMTT4FiISKsE1i6TgnZmxW3OejggFZMIIBVTAdBgNVHQ4EFgQUOuKqJZJOrKmUfc8ZaeoTBrmoMNMwHwYDVR0jBBgwFoAUUdvZZkKzSis/VyxUjYVzHedXz38wSgYIKwYBBQUHAQEEPjA8MDoGCCsGAQUFBzABhi5odHRwOi8vb2NzcC10ZXN0cmVmLnJvb3QtY2EudGktZGllbnN0ZS5kZS9vY3NwMA4GA1UdDwEB/wQEAwIBBjBGBgNVHSAEPzA9MDsGCCqCFABMBIEjMC8wLQYIKwYBBQUHAgEWIWh0dHA6Ly93d3cuZ2VtYXRpay5kZS9nby9wb2xpY2llczBbBgNVHREEVDBSoFAGA1UECqBJDEdnZW1hdGlrIEdlc2VsbHNjaGFmdCBmw7xyIFRlbGVtYXRpa2Fud2VuZHVuZ2VuIGRlciBHZXN1bmRoZWl0c2thcnRlIG1iSDASBgNVHRMBAf8ECDAGAQH/AgEAMAoGCCqGSM49BAMCA0gAMEUCIFon6V178kFN5t6+CyZG+QxZ2uM4J31/lVe7LZyG2edMAiEAgNKUdc2aq8Sl32sDt46OAid4UWRGDwnkdij5dR1s5xA="


def return_gem_cert(cn: str) -> bytes:
    if cn == "GEM.KOMP-CA50 TEST-ONLY":
        return base64.b64decode(gem_komp_ca50_cert)
    raise Exception("Could not find cert" + cn)


# Use a domain found in our raw fedlist data instead of inserting a fake one
DOMAIN_IN_LIST = "timo.staging.famedly.de"


def return_localization(mxid: str) -> str:
    # Normally, this function in the InviteChecker would retrieve data from a configured
    # url. As such, these are all fake and do not require any registering outside of
    # that found in a given test.
    if mxid in {
        f"@mxid:{DOMAIN_IN_LIST}",
        f"matrix:u/matrixuri%3A{DOMAIN_IN_LIST}",
        f"matrix:u/matrixuri2:{DOMAIN_IN_LIST}",
        f"matrix:user/gematikuri%3A{DOMAIN_IN_LIST}",
        f"matrix:user/gematikuri2:{DOMAIN_IN_LIST}",
        "matrix:u/a%3Atest",
    }:
        return "pract"
    if mxid in {
        f"@mxidorg:{DOMAIN_IN_LIST}",
        f"matrix:u/matrixuriorg%3A{DOMAIN_IN_LIST}",
        f"matrix:u/matrixuri2org:{DOMAIN_IN_LIST}",
        f"matrix:user/gematikuriorg%3A{DOMAIN_IN_LIST}",
        f"matrix:user/gematikuri2org:{DOMAIN_IN_LIST}",
        "matrix:u/b%3Atest",
    }:
        return "org"
    if mxid in {
        f"@mxidorgpract:{DOMAIN_IN_LIST}",
        f"matrix:u/matrixuriorgpract%3A{DOMAIN_IN_LIST}",
        f"matrix:u/matrixuri2orgpract:{DOMAIN_IN_LIST}",
        f"matrix:user/gematikuriorgpract%3A{DOMAIN_IN_LIST}",
        f"matrix:user/gematikuri2orgpract:{DOMAIN_IN_LIST}",
        "matrix:u/c%3Atest",
    }:
        return "orgPract"
    if mxid in {
        f"@mxid404:{DOMAIN_IN_LIST}",
        f"matrix:u/matrixuri404%3A{DOMAIN_IN_LIST}",
        f"matrix:u/matrixuri2404:{DOMAIN_IN_LIST}",
        f"matrix:user/gematikuri404%3A{DOMAIN_IN_LIST}",
        f"matrix:user/gematikuri2404:{DOMAIN_IN_LIST}",
    }:
        raise errors.HttpResponseException(404, "Not found", b"")
    return "none"


class ModuleApiTestCase(synapsetest.HomeserverTestCase):
    @classmethod
    def setUpClass(cls):
        cls._patcher1 = patch(
            "synapse_invite_checker.InviteChecker._raw_federation_list_fetch",
            new=AsyncMock(return_value=rawjwt),
        )
        cls._patcher2 = patch(
            "synapse_invite_checker.InviteChecker._raw_gematik_root_ca_fetch",
            new=AsyncMock(return_value=json.loads(raw_ca_list)),
        )
        cls._patcher3 = patch(
            "synapse_invite_checker.InviteChecker._raw_gematik_intermediate_cert_fetch",
            new=AsyncMock(side_effect=return_gem_cert),
        )
        cls._patcher4 = patch(
            "synapse_invite_checker.InviteChecker._raw_localization_fetch",
            new=AsyncMock(side_effect=return_localization),
        )
        cls._patcher1.start()
        cls._patcher2.start()
        cls._patcher3.start()
        cls._patcher4.start()

    @classmethod
    def tearDownClass(cls):
        cls._patcher1.stop()
        cls._patcher2.stop()
        cls._patcher3.stop()
        cls._patcher4.stop()

    servlets = [
        admin.register_servlets,
        account_data.register_servlets,
        login.register_servlets,
        room.register_servlets,
        presence.register_servlets,
        profile.register_servlets,
        notifications.register_servlets,
    ]

    # Ignore ARG001
    @override
    def prepare(
        self, reactor: MemoryReactor, clock: Clock, homeserver: HomeServer
    ) -> None:
        self.store = homeserver.get_datastores().main
        self.module_api = homeserver.get_module_api()
        self.event_creation_handler = homeserver.get_event_creation_handler()
        self.sync_handler = homeserver.get_sync_handler()
        self.auth_handler = homeserver.get_auth_handler()

    @override
    def make_homeserver(self, reactor: MemoryReactor, clock: Clock) -> HomeServer:
        # Mock out the calls over federation.
        self.fed_transport_client = Mock(spec=["send_transaction"])
        self.fed_transport_client.send_transaction = AsyncMock(return_value={})

        return self.setup_test_homeserver(
            federation_transport_client=self.fed_transport_client,
        )

    def default_config(self) -> dict[str, Any]:
        conf = super().default_config()
        if "modules" not in conf:
            conf["modules"] = [
                {
                    "module": "synapse_invite_checker.InviteChecker",
                    "config": {
                        "federation_list_url": "http://dummy.test/FederationList/federationList.jws",
                        "federation_localization_url": "http://dummy.test/localization",
                        "federation_list_client_cert": "tests/certs/client.pem",
                        "gematik_ca_baseurl": "https://download-ref.tsl.ti-dienste.de/",
                    },
                }
            ]
        return conf


class LocalInviteTest(ModuleApiTestCase):
    def prepare(self, reactor: MemoryReactor, clock: Clock, homeserver: HomeServer):
        super().prepare(reactor, clock, homeserver)
        self.user_a = self.register_user("a", "password")
        self.access_token = self.login("a", "password")
        self.user_b = self.register_user("b", "password")
        self.user_c = self.register_user("c", "password")

        # authenticated as user_a
        self.helper.auth_user_id = self.user_a

    def test_invite_to_dm(self) -> None:
        """Tests that a dm with a local user can be created, but nobody else invited"""
        room_id = self.helper.create_room_as(
            self.user_a, is_public=False, tok=self.access_token
        )
        assert room_id, "Room created"

        # create DM event
        channel = self.make_request(
            "PUT",
            f"/user/{self.user_a}/account_data/m.direct",
            {
                self.user_b: [room_id],
            },
            access_token=self.access_token,
        )
        assert channel.code == 200, channel.result

        # Can't invite other users
        self.helper.invite(
            room=room_id,
            src=self.user_a,
            targ=self.user_c,
            tok=self.access_token,
            expect_code=403,
        )
        # But can invite the dm user
        self.helper.invite(
            room=room_id,
            src=self.user_a,
            targ=self.user_b,
            tok=self.access_token,
            expect_code=200,
        )

    def test_invite_to_group(self) -> None:
        """Tests that a group with local users works normally"""
        room_id = self.helper.create_room_as(
            self.user_a, is_public=False, tok=self.access_token
        )
        assert room_id, "Room created"

        # create DM event
        channel = self.make_request(
            "PUT",
            f"/user/{self.user_a}/account_data/m.direct",
            {
                self.user_b: ["!not:existing.example.com"],
            },
            access_token=self.access_token,
        )
        assert channel.code == 200, channel.result

        # Can invite other users
        self.helper.invite(
            room=room_id,
            src=self.user_a,
            targ=self.user_c,
            tok=self.access_token,
            expect_code=200,
        )
        self.helper.invite(
            room=room_id,
            src=self.user_a,
            targ=self.user_b,
            tok=self.access_token,
            expect_code=200,
        )

    def test_invite_to_group_without_dm_event(self) -> None:
        """Tests that a group with local users works normally in case the user has no m.direct set"""
        room_id = self.helper.create_room_as(
            self.user_a, is_public=False, tok=self.access_token
        )
        assert room_id, "Room created"

        # Can invite other users
        self.helper.invite(
            room=room_id,
            src=self.user_a,
            targ=self.user_c,
            tok=self.access_token,
            expect_code=200,
        )
        self.helper.invite(
            room=room_id,
            src=self.user_a,
            targ=self.user_b,
            tok=self.access_token,
            expect_code=200,
        )


class RemoteInviteTest(ModuleApiTestCase):
    def prepare(self, reactor: MemoryReactor, clock: Clock, homeserver: HomeServer):
        super().prepare(reactor, clock, homeserver)
        self.user_a = self.register_user("a", "password")
        self.access_token = self.login("a", "password")
        self.user_b = self.register_user("b", "password")
        self.user_c = self.register_user("c", "password")

        # authenticated as user_a
        self.helper.auth_user_id = self.user_a

    async def may_invite(self, inviter: str, invitee: str, roomid: str):
        req = defer.ensureDeferred(
            self.hs.get_module_api()._callbacks.spam_checker.user_may_invite(
                inviter, invitee, roomid
            )
        )
        self.wait_on_thread(req)
        ret = self.get_success(req)
        if ret == NOT_SPAM:
            return NOT_SPAM
        return ret[0]  # return first code instead of all of them to make assert easier

    async def test_invite_from_remote_outside_of_fed_list(self) -> None:
        """Tests that an invite from a remote server not in the federation list gets denied"""

        channel = self.make_request(
            "PUT",
            "/_synapse/client/com.famedly/tim/v1/contacts",
            {
                "displayName": "Test User",
                "mxid": f"@example:{DOMAIN_IN_LIST}",
                "inviteSettings": {
                    "start": 0,
                },
            },
            access_token=self.access_token,
        )
        assert channel.code == 200, channel.result

        channel = self.make_request(
            "PUT",
            "/_synapse/client/com.famedly/tim/v1/contacts",
            {
                "displayName": "Test User",
                "mxid": f"@example:not-{DOMAIN_IN_LIST}",
                "inviteSettings": {
                    "start": 0,
                },
            },
            access_token=self.access_token,
        )
        assert channel.code == 200, channel.result

        assert (
            await self.may_invite(
                f"@example:not-{DOMAIN_IN_LIST}", self.user_a, "!madeup:example.com"
            )
            == errors.Codes.FORBIDDEN
        )
        # currently not testing modifying the fed list atm
        assert (
            await self.may_invite(
                "@example:messenger.spilikin.dev", self.user_a, "!madeup:example.com"
            )
            == errors.Codes.FORBIDDEN
        )
        assert (
            await self.may_invite(
                f"@example:{DOMAIN_IN_LIST}", self.user_a, "!madeup:example.com"
            )
            == NOT_SPAM
        )
        assert (
            await self.may_invite(
                f"@example2:not-{DOMAIN_IN_LIST}", self.user_a, "!madeup:example.com"
            )
            == errors.Codes.FORBIDDEN
        )
        assert (
            await self.may_invite(
                f"@example2:{DOMAIN_IN_LIST}", self.user_a, "!madeup:example.com"
            )
            == errors.Codes.FORBIDDEN
        )

    async def test_invite_from_publicly_listed_practitioners(self) -> None:
        """Tests that an invite from a remote server gets accepted when in the federation list and both practitioners are public"""
        for inviter in {
            f"@mxid:{DOMAIN_IN_LIST}",
            f"@matrixuri:{DOMAIN_IN_LIST}",
            f"@matrixuri2:{DOMAIN_IN_LIST}",
            f"@gematikuri:{DOMAIN_IN_LIST}",
            f"@gematikuri2:{DOMAIN_IN_LIST}",
            f"@mxidorgpract:{DOMAIN_IN_LIST}",
            f"@matrixuriorgpract:{DOMAIN_IN_LIST}",
            f"@matrixuri2orgpract:{DOMAIN_IN_LIST}",
            f"@gematikuriorgpract:{DOMAIN_IN_LIST}",
            f"@gematikuri2orgpract:{DOMAIN_IN_LIST}",
        }:
            assert (
                await self.may_invite(inviter, self.user_a, "!madeup:example.com")
                == NOT_SPAM
            )
            assert (
                await self.may_invite(inviter, self.user_c, "!madeup:example.com")
                == NOT_SPAM
            )

        for inviter in {
            f"@mxid404:{DOMAIN_IN_LIST}",
            f"@matrixuri404:{DOMAIN_IN_LIST}",
            f"@matrixuri2404:{DOMAIN_IN_LIST}",
            f"@gematikuri404:{DOMAIN_IN_LIST}",
            f"@gematikuri2404:{DOMAIN_IN_LIST}",
        }:
            assert (
                await self.may_invite(inviter, self.user_a, "!madeup:example.com")
                == errors.Codes.FORBIDDEN
            )

    async def test_invite_from_remote_to_local_org(self) -> None:
        """Tests that an invite from a remote server gets accepted when in the federation list and the invite is to an orgPract"""
        for inviter in {
            f"@mxid:{DOMAIN_IN_LIST}",
            f"@matrixuri:{DOMAIN_IN_LIST}",
            f"@matrixuri2:{DOMAIN_IN_LIST}",
            f"@gematikuri:{DOMAIN_IN_LIST}",
            f"@gematikuri2:{DOMAIN_IN_LIST}",
            f"@mxidorgpract:{DOMAIN_IN_LIST}",
            f"@matrixuriorgpract:{DOMAIN_IN_LIST}",
            f"@matrixuri2orgpract:{DOMAIN_IN_LIST}",
            f"@gematikuriorgpract:{DOMAIN_IN_LIST}",
            f"@gematikuri2orgpract:{DOMAIN_IN_LIST}",
            f"@mxid404:{DOMAIN_IN_LIST}",
            f"@matrixuri404:{DOMAIN_IN_LIST}",
            f"@matrixuri2404:{DOMAIN_IN_LIST}",
            f"@gematikuri404:{DOMAIN_IN_LIST}",
            f"@gematikuri2404:{DOMAIN_IN_LIST}",
        }:
            assert (
                await self.may_invite(inviter, self.user_b, "!madeup:example.com")
                == NOT_SPAM
            )
            assert (
                await self.may_invite(inviter, self.user_c, "!madeup:example.com")
                == NOT_SPAM
            )

        assert (
            await self.may_invite(
                "@unknown:not.in.fed", self.user_b, "!madeup:example.com"
            )
            == errors.Codes.FORBIDDEN
        )
        assert (
            await self.may_invite(
                "@unknown:not.in.fed", self.user_c, "!madeup:example.com"
            )
            == errors.Codes.FORBIDDEN
        )


class ContactsApiTest(ModuleApiTestCase):
    def prepare(self, reactor: MemoryReactor, clock: Clock, homeserver: HomeServer):
        super().prepare(reactor, clock, homeserver)
        self.user_a = self.register_user("a", "password")
        self.access_token = self.login("a", "password")
        self.user_b = self.register_user("b", "password")
        self.user_c = self.register_user("c", "password")

        # authenticated as user_a
        self.helper.auth_user_id = self.user_a

    async def test_contact_management_info_resource(self) -> None:
        """Tests that the registered info resource is accessible"""

        channel = self.make_request(
            method="GET",
            path="/_synapse/client/com.famedly/tim/v1",
        )

        assert channel.code == 200, channel.result
        assert channel.json_body["title"] == "Invite Checker module by Famedly"
        assert channel.json_body["description"] == "Invite Checker module by Famedly"
        assert channel.json_body["contact"] == "info@famedly.com"
        assert channel.json_body["version"], "Version returned"

    def test_list_contacts(self) -> None:
        # Requires authentication
        channel = self.make_request(
            "GET",
            "/_synapse/client/com.famedly/tim/v1/contacts",
        )
        assert channel.code == 401, channel.result

        # Test for a reasonable return value
        channel = self.make_request(
            "GET",
            "/_synapse/client/com.famedly/tim/v1/contacts",
            access_token=self.access_token,
        )
        assert channel.code == 200, channel.result
        assert "contacts" in channel.json_body, "Result contains contacts"
        assert len(channel.json_body["contacts"]) == 0, "List is empty initially"

    def test_add_contact(self) -> None:
        """See if we can add a new contact"""
        # Requires authentication
        channel = self.make_request(
            "PUT",
            "/_synapse/client/com.famedly/tim/v1/contacts",
            {
                "displayName": "Test User",
                "mxid": "@test:other.example.com",
                "inviteSettings": {"start": 0},
            },
        )
        assert channel.code == 401, channel.result

        # Test missing field validation
        channel = self.make_request(
            "PUT",
            "/_synapse/client/com.famedly/tim/v1/contacts",
            {
                "displayName": "Test User",
                "inviteSettings": {
                    "start": 0,
                },
            },
            access_token=self.access_token,
        )
        assert channel.code == 400, channel.result

        # Test for a reasonable return value
        channel = self.make_request(
            "PUT",
            "/_synapse/client/com.famedly/tim/v1/contacts",
            {
                "displayName": "Test User",
                "mxid": "@test:other.example.com",
                "inviteSettings": {
                    "start": 0,
                },
            },
            access_token=self.access_token,
        )
        assert channel.code == 200, channel.result
        assert "displayName" in channel.json_body, "Result contains contact"

        # check for 1 contact
        channel = self.make_request(
            "GET",
            "/_synapse/client/com.famedly/tim/v1/contacts",
            access_token=self.access_token,
        )
        assert channel.code == 200, channel.result
        assert "contacts" in channel.json_body, "Result contains contacts"
        assert len(channel.json_body["contacts"]) == 1, "List is not empty anymore"

        # see if we properly overwrite settings
        channel = self.make_request(
            "PUT",
            "/_synapse/client/com.famedly/tim/v1/contacts",
            {
                "displayName": "Test User",
                "mxid": "@test:other.example.com",
                "inviteSettings": {
                    "start": 500,
                },
            },
            access_token=self.access_token,
        )
        assert channel.code == 200, channel.result
        assert "displayName" in channel.json_body, "Result contains contact"

        # check for 1 contact
        channel = self.make_request(
            "GET",
            "/_synapse/client/com.famedly/tim/v1/contacts",
            access_token=self.access_token,
        )
        assert channel.code == 200, channel.result
        assert "contacts" in channel.json_body, "Result contains contacts"
        assert len(channel.json_body["contacts"]) == 1, "List is not empty anymore"
        assert (
            channel.json_body["contacts"][0]["inviteSettings"]["start"] == 500
        ), "Setting overwritten"

        # And post works as well
        channel = self.make_request(
            "POST",
            "/_synapse/client/com.famedly/tim/v1/contacts",
            {
                "displayName": "Test User",
                "mxid": "@test:other.example.com",
                "inviteSettings": {
                    "start": 400,
                },
            },
            access_token=self.access_token,
        )
        assert channel.code == 200, channel.result
        assert "displayName" in channel.json_body, "Result contains contact"

        # check for 1 contact
        channel = self.make_request(
            "GET",
            "/_synapse/client/com.famedly/tim/v1/contacts",
            access_token=self.access_token,
        )
        assert channel.code == 200, channel.result
        assert "contacts" in channel.json_body, "Result contains contacts"
        assert len(channel.json_body["contacts"]) == 1, "List is not empty anymore"
        assert (
            channel.json_body["contacts"][0]["inviteSettings"]["start"] == 400
        ), "Setting overwritten"

        # And we can add a second user
        channel = self.make_request(
            "POST",
            "/_synapse/client/com.famedly/tim/v1/contacts",
            {
                "displayName": "Test User2",
                "mxid": "@test2:other.example.com",
                "inviteSettings": {
                    "start": 300,
                },
            },
            access_token=self.access_token,
        )
        assert channel.code == 200, channel.result
        assert "displayName" in channel.json_body, "Result contains contact"

        # check for 2 contacts
        channel = self.make_request(
            "GET",
            "/_synapse/client/com.famedly/tim/v1/contacts",
            access_token=self.access_token,
        )
        assert channel.code == 200, channel.result
        assert "contacts" in channel.json_body, "Result contains contacts"
        assert len(channel.json_body["contacts"]) == 2, "List is not empty anymore"
        assert [
            item["inviteSettings"]["start"]
            for item in channel.json_body["contacts"]
            if item["mxid"] == "@test:other.example.com"
        ] == [400], "Setting overwritten"
        assert [
            item["inviteSettings"]["start"]
            for item in channel.json_body["contacts"]
            if item["mxid"] == "@test2:other.example.com"
        ] == [300], "Setting overwritten"

    def test_get_contact(self) -> None:
        """See if we can retrieve a specific contact"""
        # Requires authentication
        channel = self.make_request(
            "GET",
            "/_synapse/client/com.famedly/tim/v1/contacts/@test:other.example.com",
        )
        assert channel.code == 401, channel.result

        # 404 on unknown contact
        channel = self.make_request(
            "GET",
            "/_synapse/client/com.famedly/tim/v1/contacts/@test:other.example.com",
            access_token=self.access_token,
        )
        assert channel.code == 404, channel.result

        # Test for a reasonable return value
        channel = self.make_request(
            "PUT",
            "/_synapse/client/com.famedly/tim/v1/contacts",
            {
                "displayName": "Test User",
                "mxid": "@test:other.example.com",
                "inviteSettings": {
                    "start": 0,
                },
            },
            access_token=self.access_token,
        )
        assert channel.code == 200, channel.result
        assert "displayName" in channel.json_body, "Result contains contact"

        # 200 after adding
        channel = self.make_request(
            "GET",
            "/_synapse/client/com.famedly/tim/v1/contacts/@test:other.example.com",
            access_token=self.access_token,
        )

        # Verify that adding another still returns a value
        channel = self.make_request(
            "PUT",
            "/_synapse/client/com.famedly/tim/v1/contacts",
            {
                "displayName": "Test User",
                "mxid": "@test2:other.example.com",
                "inviteSettings": {
                    "start": 0,
                },
            },
            access_token=self.access_token,
        )
        assert channel.code == 200, channel.result
        assert "displayName" in channel.json_body, "Result contains contact"

        # 200 after adding
        channel = self.make_request(
            "GET",
            "/_synapse/client/com.famedly/tim/v1/contacts/@test:other.example.com",
            access_token=self.access_token,
        )
        assert channel.code == 200, channel.result

        # Unknown user still returns 404 after adding
        channel = self.make_request(
            "GET",
            "/_synapse/client/com.famedly/tim/v1/contacts/@test3:other.example.com",
            access_token=self.access_token,
        )
        assert channel.code == 404, channel.result

    def test_del_contact(self) -> None:
        """See if we can delete a contact"""
        # Requires authentication
        channel = self.make_request(
            "DELETE",
            "/_synapse/client/com.famedly/tim/v1/contacts/@test:other.example.com",
        )
        assert channel.code == 401, channel.result

        # 404 on unknown contact
        channel = self.make_request(
            "DELETE",
            "/_synapse/client/com.famedly/tim/v1/contacts/@test:other.example.com",
            access_token=self.access_token,
        )
        assert channel.code == 404, channel.result

        # Test for a reasonable return value
        channel = self.make_request(
            "PUT",
            "/_synapse/client/com.famedly/tim/v1/contacts",
            {
                "displayName": "Test User",
                "mxid": "@test:other.example.com",
                "inviteSettings": {
                    "start": 0,
                },
            },
            access_token=self.access_token,
        )
        assert channel.code == 200, channel.result
        assert "displayName" in channel.json_body, "Result contains contact"

        # 200 after adding
        channel = self.make_request(
            "DELETE",
            "/_synapse/client/com.famedly/tim/v1/contacts/@test:other.example.com",
            access_token=self.access_token,
        )
        assert channel.code == 204, channel.result

        # 404 on unknown contact
        channel = self.make_request(
            "DELETE",
            "/_synapse/client/com.famedly/tim/v1/contacts/@test:other.example.com",
            access_token=self.access_token,
        )
        assert channel.code == 404, channel.result


class FederationDomainSchemaTest(ModuleApiTestCase):
    """
    Test that the required fields for the federation list are present and parsable.
    See:
    https://github.com/gematik/api-vzd/blob/main/src/schema/FederationList.json
    for the schema to use.

    As of the time of this writing, these are fields that are required:
        domain: str
        telematikID: str
        timAnbieter: str
        isInsurance: bool

    """

    def prepare(
        self, reactor: MemoryReactor, clock: Clock, homeserver: HomeServer
    ) -> None:
        super().prepare(reactor, clock, homeserver)

        self.invchecker = InviteChecker(
            self.hs.config.modules.loaded_modules[0][1], self.hs.get_module_api()
        )

    async def extract_entry_from_domainList(self, domain: str) -> FederationDomain:
        """
        Search for a specific domain in the federation list
        """
        _, raw_fed_list = await self.invchecker.fetch_federation_allow_list()
        assert len(raw_fed_list.domainList) > 0

        for domain_entry in raw_fed_list.domainList:
            if domain_entry.domain == domain:
                return domain_entry

        assert False, f"Not found in federation list {domain}"

    async def test_federation_list(self) -> None:
        """Ensure we can properly fetch the federation list"""

        domains, _ = await self.invchecker.fetch_federation_allow_list()
        assert "timo.staging.famedly.de" in domains

    async def test_common_fed_domain(self):
        # First test the most common FederationDomain entry
        # {
        #     "domain": "timo.staging.famedly.de",
        #     "telematikID": "1-SMC-B-Testkarte--883110000147435",
        #     "timAnbieter": "ORG-0217:BT-0158",
        #     "isInsurance": false
        # },
        test_entry = await self.extract_entry_from_domainList("timo.staging.famedly.de")
        assert test_entry.domain == "timo.staging.famedly.de"
        assert test_entry.telematikID == "1-SMC-B-Testkarte--883110000147435"
        assert test_entry.timAnbieter == "ORG-0217:BT-0158"
        assert test_entry.isInsurance is False

    async def test_insurance_fed_domain(self):
        # Then test an insurance FederationDomain entry. Want isInsurance to be True
        # {
        #     "domain": "ti-messengertest.dev.ccs.gematik.solutions",
        #     "telematikID": "5-2-KHAUS-Kornfeld01",
        #     "timAnbieter": "ORG-0001:BT-0001",
        #     "isInsurance": true
        # },

        test_entry = await self.extract_entry_from_domainList(
            "ti-messengertest.dev.ccs.gematik.solutions"
        )
        assert test_entry.domain == "ti-messengertest.dev.ccs.gematik.solutions"
        assert test_entry.telematikID == "5-2-KHAUS-Kornfeld01"
        assert test_entry.timAnbieter == "ORG-0001:BT-0001"
        assert test_entry.isInsurance is True

    async def test_illegal_fed_domain(self):
        # This test is against a FederationDomain entry with data that is counter to
        # what the schema says. In this case, 'timAnbieter' should be required but is
        # reflected as `null`
        # {
        #     "domain": "messenger.spilikin.dev",
        #     "telematikID": "1-SMC-B-Testkarte-883110000096089",
        #     "timAnbieter": null,
        #     "isInsurance": false
        # },

        test_entry = await self.extract_entry_from_domainList("messenger.spilikin.dev")
        assert test_entry.domain == "messenger.spilikin.dev"
        assert test_entry.telematikID == "1-SMC-B-Testkarte-883110000096089"
        assert test_entry.timAnbieter is None
        assert test_entry.isInsurance is False


class MessengerInfoTestCase(ModuleApiTestCase):
    async def test_default_operator_contact_info_resource(self) -> None:
        """Tests that the messenger operator contact info resource is accessible"""

        channel = self.make_request(
            method="GET",
            path="/_synapse/client/com.famedly/tim/tim-information",
        )

        assert channel.code == 200, channel.result
        assert channel.json_body["title"] == "Invite Checker module by Famedly"
        assert channel.json_body["description"] == "Invite Checker module by Famedly"
        assert channel.json_body["contact"] == "info@famedly.com"
        assert channel.json_body["version"], "Version returned"

    @synapsetest.override_config(
        {
            "modules": [
                {
                    "module": "synapse_invite_checker.InviteChecker",
                    "config": {
                        "title": "abc",
                        "description": "def",
                        "contact": "ghi",
                        "federation_list_url": "https://localhost:8080",
                        "federation_localization_url": "https://localhost:8000/localization",
                        "federation_list_client_cert": "tests/certs/client.pem",
                        "gematik_ca_baseurl": "https://download-ref.tsl.ti-dienste.de/",
                    },
                }
            ]
        }
    )
    def test_custom_operator_contact_info_resource(self) -> None:
        """Tests that the registered info resource is accessible and has the configured values"""

        channel = self.make_request(
            method="GET",
            path="/_synapse/client/com.famedly/tim/tim-information",
        )

        assert channel.code == 200, channel.result
        assert channel.json_body["title"] == "abc"
        assert channel.json_body["description"] == "def"
        assert channel.json_body["contact"] == "ghi"
        assert channel.json_body["version"], "Version returned"
